swagger: '2.0'
info:
  description: This is a sample API for users and tasks.
  version: 1.0.0
  title: User and Task API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: tkarp87@Live.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: petstore.swagger.io
basePath: /v2
tags:
  - name: user
    description: Operations about users
  - name: task
    description: Operations about tasks
schemes:
  - http
paths:
  /user:
    get:
      tags:
        - user
      summary: get all users
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      responses:
        default:
          description: successful operation
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: userFirstName
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/{userid}/task:
    post:
      tags:
        - task
      summary: Add a new task to the system
      description: ''
      operationId: addTask
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Task object that needs to be added to the system
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '405':
          description: Invalid input
      security:
        - app_auth:
            - 'write:tasks'
            - 'read:tasks'
    put:
      tags:
        - task
      summary: Update an existing task
      description: ''
      operationId: updateTask
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Task object that needs to be added to the system
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
        '405':
          description: Validation exception
      security:
        - app_auth:
            - 'write:tasks'
            - 'read:tasks'
  /user/{userid}/task/{taskId}:
    get:
      tags:
        - task
      summary: Find task by ID
      description: Returns a single task
      operationId: getTaskById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: ID of task to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
      security:
        - api_key: []
    post:
      tags:
        - task
      summary: Updates a task in the store with Task json object
      description: ''
      operationId: updateTaskWithForm
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - name: taskId
          in: path
          description: ID of pet that needs to be updated
          required: true
          type: integer
          format: int64
        - name: taskObj,
         description": "task object that needs to be added to the store",
         required": true,
         type": "Task",
         paramType": "body"
      }
      responses:
        '405':
          description: Invalid input
      security:
        - app_auth:
            - 'write:tasks'
            - 'read:tasks'
    delete:
      tags:
        - task
      summary: Deletes a task
      description: ''
      operationId: deleteTask
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: taskId
          in: path
          description: Task id to delete
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
      security:
        - app_auth:
            - 'write:tasks'
            - 'read:tasks'
securityDefinitions:
  app_auth:
    type: oauth2
    authorizationUrl: 'http://app.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:tasks': modify tasks in your account
      'read:tasks': read your tasks
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      firstName:
        type: string
      lastName:
        type: string
    xml:
      name: User
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Task:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: Take out Trash
      photoUrls:
        type: array
        xml:
          name: name
          wrapped: true
        items:
          type: string
      tags:
        type: array
        xml:
          name: tag
          wrapped: true
        items:
          $ref: '#/definitions/Tag'
      status:
        type: string
        description: task status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: Pet
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
